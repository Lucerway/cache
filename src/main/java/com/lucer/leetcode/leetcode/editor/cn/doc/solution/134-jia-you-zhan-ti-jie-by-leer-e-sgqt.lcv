### 方法，一次遍历

**解题思路**

最容易想到的解法是：从头到尾遍历每个加油站，并检查以该加油站为起点，最终能否行驶一周。可以通过**减少被检查的加油站数目**，来降低总的时间复杂度。

假设此前发现，从加油站 $x$ 出发，每经过一个加油站就加一次油（包括起始加油站），最后一个可以到达的加油站是 $y$（不妨设 $x<y$）。这就说明：
$$
\sum_{i=x}^{y}\textit{gas}[i] < \sum_{i=x}^{y}\textit{cost}[i] \\ \sum_{i=x}^{j}gas[i] \ge \sum_{i=x}^{j}cost[i] ~ \text{(For all $j \in [x, y)$) }
$$

第一个式子表明无法到达加油站 $y$ 的下一个加油站，第二个式子表明可以到达 $y$ 以及 $y$ 之前的所有加油站。

现在，考虑任意一个位于 $x,y$ 之间的加油站 $z$（包括 $x$ 和 $y$），考察从该加油站出发，能否到达加油站 $y$ 的下一个加油站，也就是要判断 $\sum_{i=z}^{y}\textit{gas}[i]$ 与 $\sum_{i=z}^{y}\textit{cost}[i]$ 之间的大小关系。

根据上面的式子，可以得到：
$$
\begin{aligned} 
\sum_{i=z}^{y}\textit{gas}[i]&=\sum_{i=x}^{y}\textit{gas}[i]-\sum_{i=x}^{z-1}\textit{gas}[i] \\
&< \sum_{i=x}^{y}\textit{cost}[i]-\sum_{i=x}^{z-1}\textit{gas}[i] \\
&< \sum_{i=x}^{y}\textit{cost}[i]-\sum_{i=x}^{z-1}cost[i] \\
&= \sum_{i=z}^{y}\textit{cost}[i]
\end{aligned}
$$

其中不等式的第二步、第三步分别利用了上面的第一个、第二个不等式。

从上面的推导中，能够得出结论：从 $x,y$ 之间的任何一个加油站出发，都无法到达加油站 $y$ 的下一个加油站。

在发现了这一个性质后，算法就很清楚了：首先检查第 $0$ 个加油站，并试图判断能否环绕一周；如果不能，就跳过可以到达的加油站，从第一个无法到达的加油站开始继续检查。

[参考](https://leetcode.cn/problems/gas-station/solution/jia-you-zhan-by-leetcode-solution/)

### 代码

* []

```Java
class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int n = gas.length;
        for (int i = 0; i < n;) {
            int gasSum = 0, costSum = 0;
            // cnt 记录走过的步数
            int cnt = 0;
            while (cnt < n) {
                // 解决环形问题
                int j = (i + cnt) % n;
                gasSum += gas[j];
                costSum += cost[j];
                if (gasSum < costSum) {
                    // 无法到达加油站 j 的下一个加油站
                    break;
                }
                ++cnt;
            }
            if (cnt == n) {
                // 走了 n 步，行驶一周，回到出发点
                return i;
            } else {
                // 无法环绕一周，从第一个无法到达的加油站开始继续检查
                i += cnt + 1;
            }
        }
        return -1;
    }
}
```

* []

```Java
class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int n = gas.length;
        for (int i = 0; i < n;) {
            int cnt = 0;
            if (gas[i] >= cost[i]) {
                int rem = 0;
                while (cnt < n) {
                    int j = (i + cnt) % n;
                    rem += gas[j] - cost[j];
                    if (rem < 0) {
                        break;
                    }
                    cnt++;
                }
            }
            if (cnt == n) {
                return i;
            } else {
                i += cnt + 1;
            }
        }
        return -1;
    }
}
```

**复杂度分析**

- 时间复杂度：$O(N)$，其中 $N$ 为数组的长度。对数组进行了单次遍历。

- 空间复杂度：$O(1)$。

