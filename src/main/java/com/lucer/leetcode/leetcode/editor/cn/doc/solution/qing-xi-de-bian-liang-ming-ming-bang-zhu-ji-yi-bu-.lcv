### 解题思路

- 用 `hashMap` 存储遍历过的元素和对应的索引。
- 每遍历一个元素，看看 `hashMap` 中是否存在满足要求的目标数字。
- 所有事情在一次遍历中完成（用了空间换取时间）。

### 代码

* []

```Javascript
const twoSum = (nums, target) => {
  const prevNums = {};                    // 存储出现过的数字，和对应的索引               

  for (let i = 0; i < nums.length; i++) {       // 遍历元素   
    const curNum = nums[i];                     // 当前元素   
    const targetNum = target - curNum;          // 满足要求的目标元素   
    const targetNumIndex = prevNums[targetNum]; // 在prevNums中获取目标元素的索引
    if (targetNumIndex !== undefined) {         // 如果存在，直接返回 [目标元素的索引,当前索引]
      return [targetNumIndex, i];
    } else {                                    // 如果不存在，说明之前没出现过目标元素
      prevNums[curNum] = i;                     // 存入当前的元素和对应的索引
    }
  }
}
```

* []

```Go
func twoSum(nums []int, target int) []int {
	prevNums := map[int]int{}
	for i, num := range nums {
		targetNum := target - num
		targetNumIndex, ok := prevNums[targetNum]
		if ok {
			return []int{targetNumIndex, i}
		} else {
			prevNums[num] = i
		}
	}
	return []int{}
}
```

### 通过情况

![image.png](https://pic.leetcode-cn.com/1599979335-cIgiAM-image.png)
![image.png](https://pic.leetcode-cn.com/1604563693-SDjyol-image.png)

### 一点点感想

写好变量命名蛮重要。有时候多写也一两行没什么，可读性蛮重要的，不需要一味追求简洁。

据说我们 90% 的时间是在看代码，10% 时间在写代码，代码的可读性直接决定了你和你同事每天的心情。写代码就像写句子，读起来轻松的代码，自己理解也方便，下次再看的时候，也不会出现“我当时写的是啥，我怎么看不懂”，再敲一遍也不容易出 bug。

> 如果有帮助，点个赞鼓励我继续写下去，写写画画了一百多篇题解图解，从算法爱好者的角度，作新手向的讲解，不忘初心。

